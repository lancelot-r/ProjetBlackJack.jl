---
title: "Projet Logiciels spécialisés et recherche reproductible"
author: "EL KHOURY Danielle, MALNOË Garance, RAVIER Lancelot"
format:
  revealjs:
    css: assets/styles.css
    resources: images
    header-includes: |
      <script src="assets/custom.js" type="application/javascript"></script>

---
## Organisation
Trois sous-projets pour explorer les particularité de Julia et R.

- **Jeu de blackjack** pour découvrir Julia au travers d'un projet puis comparaison avec l'implentation avec R et Python.

- **Benchmark** pour comparer les performances de Julia et Python.

- **Dispatching** pour comparer le simple dispatching de R et le multiple dispatching de Julia.

Nous avons également tenu un **journal de bord** tout au long du projet qui est disponible dans le rapport.

# Jeu de blackjack

## L'Objectif du jeu
Le blackjack oppose le joueur et le dealer (maitre du jeu). L'objectif pour le joueur est d'avoir plus de points que le dealer à la fin de la partie mais sans dépasser 21 auquel cas il perd immédiatement. 

 
**Les valeurs des cartes**
- Cartes de 2 à 10 -> valeur de la carte
- Cartes Valet, Dame, Roi -> 10
- Carte As ->
    - 11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.
    - 1 si en ajoutant 11, le score dépasse 21.

## Le déroulement d'une partie dans le programme
- 6 jeux de 52 cartes (pas de joker) sont mélangés ensemble pour former un seul jeu. 
- Le joueur appuie sur un bouton pour démarrer la partie.
- Le programme distribue deux cartes faces visibles au joueur.
- Le programme distribue une carte face visible au dealer.
- Les points du joueur et du dealer sont calculés et affichés au joueur.
- Le joueur doit choisir entre prendre une nouvelle carte pour changer son score (A) ou s'arrêter et laisser le programme résoudre la fin de jeu (B) :

## **A**. Il prend une nouvelle carte :
  - Si son score est égal à 21, la partie est finie et le joueur a gagné.
  - Si son score est strictement supérieur à 21, la partie est finie et le joueur a perdu.
  - Si son score est strictement inférieur à 21, il doit à nouveau choisir entre reprendre une carte (A) ou s'arrêter (B).

## **B**. Il décide de s'arretter, le programme résoud la fin de jeu :
  - Si le score du dealer est strictement inférieur à 17, le dealer pioche une nouvelle carte face visible jusqu'à avoir un score supérieur ou égal à 18.
  - Si le score du dealer est supérieur ou égal à 18, on regarde qui a gagné dans cet ordre précis :
    - Le joueur à plus de 21 points : le dealer gagne.
    - Le dealer a plus de 21 points : le joueur gagne.
    - Le joueur et le dealer ont le même score : égalité
    - Sinon, celui qui a le plus de points gagne.


# Jeu Blackjack dans Julia
## Jouer dans le terminal
- Pour jouer dans le terminal : `PlayGame.game()`
- Le joueur peut choisir son action avec les touches du claviers : Y/y et N/n.

<img src="images/BlackJack_terminal.png" alt="Terminal Julia" style="width: 100%; margin-top: 10px;">

## Jouer dans le notebook
- Utilisation de plusieurs packages : Pluto, PlutoUI, Vizagrams et HypertextLiteral.
- Aspect graphique avec des boutons *New Game*, *Hit* et *Stand*.
- Affichage de la main selon les actions.
<img src="images/blackjack_notebook.png" style="width: 200%; margin-top: 30px;">

# Jeu Blackjack dans R

## Jouer dans le terminal
- Pour jouer dans le terminal, il suffit de prendre source(le_jeu.R) et run jeu() dans de terminal.
- Le joueur peut choisir son action avec les touches du claviers : Y/y et N/n.

<img src="images/BlackJack_termR.png" alt="Terminal R" style="width: 100%; margin-top: 20px;">

## Jouer avec Rshiny
On peut aussi jouer avec un aspect graphique en Rshiny qui permet notamment d'avoir l'affichage de cartes.

<div class="two-images">
<figure>
    <img src="images/Shiny1.png" alt="1er affichage">
    <figcaption>1er affichage</figcaption>
  </figure>
  <figure>
    <img src="images/Shiny2.png" alt="Début du jeu">
    <figcaption>Début du jeu</figcaption>
  </figure>
</div>

## Jouer avec Rshiny
<div class="two-images">
<figure>
    <img src="images/Shiny3.png" alt="Choix Hit">
    <figcaption>Choix Hit</figcaption>
  </figure><figure>
    <img src="images/Shiny4.png" alt="Choix Stand et fin de la partie">
    <figcaption>Choix Stand et fin de la partie</figcaption>
  </figure>
</div>


# Jeu BlackJack dans Python
Jouer au jeu dans le terminal :

# Benchmark Julia vs Python
- On teste un algorithme classique: Le crible d'Ératosthène qui permet de trouver tous les nombres premiers inférieurs ou égaux à un entier donné N algorithme en $O(n)$.
- On a construit la fonction en Julia et en Python (on utilisant le PyCall en Julia)
- Voici les comparaisons du temps d'exécution pour différentes valeurs de N

<div class="two-images">
<figure>
    <img src="images/benchjulia1000.png" alt="Julia pour N=1000">
    <figcaption>Julia pour N=1000</figcaption>
  </figure>
  <figure>
    <img src="images/benchpy1000.png" alt="Python pour N=1000">
    <figcaption>Python pour N=1000</figcaption>
  </figure>
</div>

## 
<div class="two-images">
<figure>
    <img src="images/benchjulia10000.png" alt="Julia pour N=10000">
    <figcaption>Julia pour N=10000</figcaption>
  </figure>
  <figure>
    <img src="images/benchpy10000.png" alt="Python pour N=10000">
    <figcaption>Python pour N=10000</figcaption>
  </figure>
</div>

<div class="two-images">
<figure>
    <img src="images/benchjulia100000.png" alt="Julia pour N=100000">
    <figcaption>Julia pour N=100000</figcaption>
  </figure>
  <figure>
    <img src="images/benchpy100000.png" alt="Python pour N=100000">
    <figcaption>Python pour N=10000</figcaption>
  </figure>
</div>

- On remarque que Julia prend toujours moins de temps que Python
- Pour des valeurs de N relativement petite, la différence peur être considérée négligeable
- Alors que pour de grandes valeurs de N, on remarque une différence de plus d'une minute.

# Dispatching
## Idée
## R
## Julia
