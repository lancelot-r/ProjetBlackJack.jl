---
title: "Projet jeu du blackjack"
---
# Présentation du jeu
## Déroulement d'une partie
- 6 jeux de carte sont définis et mélangés (52 cartes, pas de joker)
- Le joueur appuie sur un bouton pour démarrer la partie
- Le programme distribue deux cartes retournées au joueur
- Le programme distribue une carte retournée à l'ordinateur
- Les points sont calculés et affichés au joueur
- Le joueur doit choisir entre laisser l'ordinateur jouer ou retirer une carte
- *S'il décide de tirer une carte :
    - Si le nombre de points est = 21, il a gagné et le jeu s'arrette
    - Si le nombre de points est >21, il a perdu et le jeu s'arrette
    - Si le nombre de points inferieur à 21, il peut décider de rejouer* ou de s'arretter**
- **S'il décide de s'arretter, l'ordinateur va retirer une carte :
    - Si il tombe sur 21, l'ordi gagne
    - Si son nombre de points est inferieur à 18, il retourne une carte
    - Si son nombre de points est superieur à 18 (entre 18 et 21), il s'arrette
    - Si son nombre de points est superieur à 21, le joueur gagne

## Valeurs des cartes
-  2 à 10 -> valeur de la carte
- Valet, dame, roi -> 10
- As ->
    - 11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.
    - 1 si en ajoutant 11, le score dépasse 21.

## Idées supplémentaires
- Ajouter une fonctionnalité de pari : le joueur peut parier des jetons sur sa réussite.
- Jouer à plusieurs.
- Ajouter un timer.

# Jeu dans le terminal
## Structure du projet en Julia
- Fichier carte.jl : Pour définir la classe carte (attributs : String nom, Int valeur, image interface graphique)
- Fichier deck.jl : Pour définir la classe deck (attributs : list de carte. Méthode : distribuer une carte (choisir une carte au hasard, la mettre dans la main de quelqu'un et l'enlever dans la liste de carte du deck))  Note : 6x52 cartes pour 1 deck de base.
- Fichier jeu.jl : Pour définir la classe de jeu (attributs : deck, deux main_cartes (ordinateur + joueur))
- Fichier main_terminal.jl : fonction générale avec les boucles de jeu.

# Jeu dans un notebook Pluto (tentative)
- Création des modules dans les fichiers Julia pour pouvoir les appeler dans Pluto
- Réussir à créer des boutons ("New Game", "Hit", "Stand") et d'afficher le jeu dans un terminal Julia avec interaction des boutons
- Faute d'interaction du jeu avec les boutons et découvrir que la réinitialisation d'une variable dans Pluto est impossible à faire car il a considère comme nouvelle définiton de la variable
- Essai de nettoyer un peu le notebook Pluto: Recherche de moyen de debbug un notebook pluto mais ce n'est pas disponible directement dans Pluto, et la librairie (https://github.com/disberd/PlutoVSCodeDebugger.jl) proposant de le faire dans VSCode n'a pas été mise à jour depuis plusieurs mois (presque 1an) donc pas moyen de faire le cheminement de penser du notebook sans faire du débug. 
- Décider d'archiver le premier essai du jeu qui consistait, dans le fichier jeu.jl, d'une fonction jeu qui contient toutes les étapes du jeu, et de créer des fonctions pour chaque étape (initialiser le jeu, afficher du statut de la partie, saisir la réponse du joueur dans le terminal) et une boucle pour agir sur le jeu selon le choix du joueur pour pouvoir juste les appeler pour faire run au jeu dans le terminal et dans Pluto. Puis, création d'un fichier main_terminal.jl avec la fontion "game" appelant les fonctions créées dans jeu.jl pour l'exécution du jeu.
- Échec de l'interaction dans Pluto: au début on pensait que c'était parce qu'on n'avait pas le temps de changer la valeur du bouton et donc on a pensé à mettre un sleep dans la boucle pour avoir le temps de cliquer sur les boutons pour changer la valeur de l'input mais aussi on rencontre un échec, on ne peut pas update les boutons tant que la fonction game() n'est pas terminée. 
- Corriger les bouton hit, stand, new  game dans Pluto avec Vizigram.
- Changer la fonction "game" pour ne plus contenir une loop "while".
- Le problème dans Pluto persiste



# Jeu dans R
- Structure du code un peu similaire à Julia
- La difference la plus flagrante: Julia ne change pas la classe des variables en appliquant des fonction, alors que dans R, ça change. Un  exemple sur cela se voit dans la fonction sample change la classe deck en une classe list.
- Solution: on impose la classe en appliquant la fonction, par exemple: Deck(sample(...)) ce qui rend une classe deck et pas list.

## Jeu dans le terminal
- Fichier Cartes_et_Deck.R : Pour définir les définition de cartes et de deck, et les fonctions à utiliser et à appeler dans le jeu.
- Fichier le_jeu.R : Pour définir un fonction pour initialiser le jeu, une autre pour afficher le statut de la partie et une pour saisir la réponse du joueur dans le terminal. Définir aussi la fonction jeu qui appelle les autres fontions pour faire run au jeu.

## Jeu avec RShiny
- Fichier shinyapp.r : En utilisant comme source le fichier "Cartes_et_Deck.R", initialiser le jeu, décrire un path pour les images à utiliser dans le jeu, créer des boutons pour les actions du joueur ("New Game", "Hit", "Stand"), afficher une console intéractive pour pouvoir jouer.
