---
title: "Projet jeu du blackjack"
---
# Présentation du jeu
## Déroulement d'une partie
- 6 jeux de carte sont définis et mélangés (52 cartes, pas de joker)
- Le joueur appuie sur un bouton pour démarrer la partie
- Le programme distribue deux cartes retournées au joueur
- Le programme distribue une carte retournée à l'ordinateur
- Les points sont calculés et affichés au joueur
- Le joueur doit choisir entre laisser l'ordinateur jouer ou retirer une carte
- *S'il décide de tirer une carte :
    - Si le nombre de points est = 21, il a gagné et le jeu s'arrette
    - Si le nombre de points est >21, il a perdu et le jeu s'arrette
    - Si le nombre de points inferieur à 21, il peut décider de rejouer* ou de s'arretter**
- **S'il décide de s'arretter, l'ordinateur va retirer une carte :
    - Si il tombe sur 21, l'ordi gagne
    - Si son nombre de points est inferieur à 18, il retourne une carte
    - Si son nombre de points est superieur à 18 (entre 18 et 21), il s'arrette
    - Si son nombre de points est superieur à 21, le joueur gagne

## Valeurs des cartes
-  2 à 10 -> valeur de la carte
- Valet, dame, roi -> 10
- As ->
    - 11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.
    - 1 si en ajoutant 11, le score dépasse 21.

# Idées supplémentaires
- Ajouter une fonctionnalité de pari : le joueur peut parier des jetons sur sa réussite.
- Jouer à plusieurs.
- Ajouter un timer.

# Jeu avec Julia

## Jeu dans le terminal

### Structure
- Fichier carte.jl : Pour définir la classe carte (attributs : String nom, Int valeur, image interface graphique)
- Fichier deck.jl : Pour définir la classe deck (attributs : list de carte. Méthode : distribuer une carte (choisir une carte au hasard, la mettre dans la main de quelqu'un et l'enlever dans la liste de carte du deck))  Note : 6x52 cartes pour 1 deck de base.
- Fichier jeu.jl : Pour définir la classe de jeu (attributs : deck, deux main_cartes (ordinateur + joueur))
- Fichier main_terminal.jl : fonction générale avec les boucles de jeu.

### A vous de jouer !
Une fois le package installé et appelé depuis votre terminal, tappez la commande suivante pour tester : ProjetBlackJack.PlayGame.game()

## Jeu dans un notebook Pluto

### Structure
- On réutilise les strucures et fonctions des fichiers carte.jl et deck.jl
- Fichier jeu_pluto_notebook.jl : Module des fonctions pour le pluto permettant d'initialiser une partie, de gérer un tour de jeu en fonction des actions du jeu, fonctions d'affichage des boutons et du texte du jeu avec Vizagram.

### Une longue route avant la réussite
Cette partie nous a posé problème pendant longtemps, nous avions réussi à créer les boutons ("New Game", "Hit", "Stand") mais nous n'arrivions pas à gérer la définition et la mise à jour des variables liées aux boutons : on ne pouvait pas mettre à jour les boutons tant que la partie n'était pas terminée. Nous avons notamment essayé de trouver un moyen de debbug un notebook pluto mais ce n'est pas disponible directement dans Pluto, et la librairie (https://github.com/disberd/PlutoVSCodeDebugger.jl) proposant de le faire dans VSCode n'a pas été mise à jour depuis plusieurs mois (presque 1an) donc pas utilisabel. Une archive de nos essais se trouve dans le dossier blackjack_julia/Essai1_PlutoNotebook_NotWorking.
Finalement, nous avons réussi à construire un notebook fonctionnel en reprenant l'exemple du notebook proposé par Remy. On a première cellule qui nous permet d'appeler toutes les packages nécessaire et à initialiser la partie. On a une cellule affichant l'état du jeu grâce à la fonction interaction et une cellule avec des boutons reliés à une variable d'état du jeu.

### A vous de jouer !
Pour jouer au notebook, tappez la commande suivante dans le terminal : blackjack_notebook()
Remarque : C'est tout à fait normal si au début le notebook affiche une erreur, il faut attendre quelques secondes.

# Jeu dans R
- Structure du code assez similaire à Julia.
- La difference la plus flagrante entre les deux langages: Julia ne change pas la classe des variables en appliquant des fonction, alors que dans R, ça change. Un  exemple sur cela se voit dans la fonction sample change la classe deck en une classe list.
- Solution: on impose la classe en appliquant la fonction, par exemple: Deck(sample(...)) ce qui rend une classe deck et pas list.

## Jeu dans le terminal

### Strucure
- Fichier Cartes_et_Deck.R : Pour définir les définition de cartes et de deck, et les fonctions à utiliser et à appeler dans le jeu.
- Fichier le_jeu.R : Pour définir un fonction pour initialiser le jeu, une autre pour afficher le statut de la partie et une pour saisir la réponse du joueur dans le terminal. Définir aussi la fonction jeu qui appelle les autres fontions pour faire run au jeu.

### A vous de jouer !
Pour lancer le jeu depuis le terminal R : 
```r
library(blackjack)
jeu()
```


## Jeu avec RShiny

### Structure
- Fichier shinyapp.r : En utilisant comme source le fichier "Cartes_et_Deck.R", initialiser le jeu, décrire un path pour les images à utiliser dans le jeu, créer des boutons pour les actions du joueur ("New Game", "Hit", "Stand"), afficher une console intéractive pour pouvoir jouer.

### A vous de jouer !
Pour lancer le shiny depuis le terminal R :
```r
library(blackjack)
shiny::runApp(system.file("shinyapp", package = "blackjack"))
```



