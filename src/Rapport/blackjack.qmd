---
title: "Projet jeu du blackjack"
---
# Présentation du jeu
## L'Objectif du jeu
Le blackjack oppose le joueur et le dealer (maitre du jeu). L'objectif pour le joueur est d'avoir plus de points que le dealer à la fin de la partie mais sans dépasser 21 auquel cas il perd immédiatement. 

## Les valeurs des cartes
- Cartes de 2 à 10 -> valeur de la carte
- Cartes Valet, Dame, Roi -> 10
- Carte As ->
    - 11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.
    - 1 si en ajoutant 11, le score dépasse 21.

## Le déroulement d'une partie dans le programme
- 6 jeux de 52 cartes (pas de joker) sont mélangés ensemble pour former un seul jeu. 
- Le joueur appuie sur un bouton pour démarrer la partie.
- Le programme distribue deux cartes faces visibles au joueur.
- Le programme distribue une carte face visible au dealer.
- Les points du joueur et du dealer sont calculés et affichés au joueur.
- Le joueur doit choisir entre prendre une nouvelle carte pour changer son score (A) ou s'arrêter et laisser le programme résoudre la fin de jeu (B) :
    - **A**. Il prend une nouvelle carte :
    - Si son score est égal à 21, la partie est finie et le joueur a gagné.
    - Si son score est strictement supérieur à 21, la partie est finie et le joueur a perdu.
    - Si son score est strictement inférieur à 21, il doit à nouveau choisir entre reprendre une carte (A) ou s'arrêter (B).

    - **B**. Il décide de s'arretter, le programme résoud la fin de jeu :
    - Si le score du dealer est strictement inférieur à 17, le dealer pioche une nouvelle carte face visible jusqu'à avoir un score supérieur ou égal à 18.
    - Si le score du dealer est supérieur ou égal à 18, on regarde qui a gagné dans cet ordre précis :
        - Le joueur à plus de 21 points : le dealer gagne.
        - Le dealer a plus de 21 points : le joueur gagne.
        - Le joueur et le dealer ont le même score : égalité
        - Sinon, celui qui a le plus de points gagne.


# Idées supplémentaires
- Ajouter une fonctionnalité de pari : le joueur peut parier des jetons sur sa réussite.
- Jouer à plusieurs.
- Ajouter un timer.

# Jeu avec Julia

## Jeu dans le terminal

### Structure
- Fichier `carte.jl` : Pour définir la classe carte (attributs : String nom, Int valeur, image interface graphique)
- Fichier `deck.jl` : Pour définir la classe deck (attributs : list de carte, méthode : distribuer une carte (choisir une carte au hasard, la mettre dans la main de quelqu'un et l'enlever dans la liste de carte du deck))
- Fichier `jeu.jl` : Pour définir la classe de jeu (attributs : deck, deux main_cartes (dealer et joueur))
- Fichier `main_terminal.jl` : fonction générale avec les boucles de jeu permettant de jouer depuis le terminal.

### A vous de jouer !
Une fois le package installé et appelé depuis votre terminal, tappez la commande suivante pour tester : `ProjetBlackJack.PlayGame.game()`

## Jeu dans un notebook Pluto

### Structure
- On réutilise les strucures et fonctions des fichiers `carte.jl` et `deck.jl`
- Fichier `jeu_pluto_notebook.jl` : Module des fonctions pour le pluto permettant d'initialiser une partie, de gérer un tour de jeu en fonction des actions du jeu, fonctions d'affichage des boutons et du texte du jeu avec Vizagram.

### Une longue route avant la réussite
Cette partie nous a posé problème pendant longtemps, nous avions réussi à créer les boutons ("New Game", "Hit", "Stand") mais nous n'arrivions pas à gérer la définition et la mise à jour des variables liées aux boutons : on ne pouvait pas mettre à jour les boutons tant que la partie n'était pas terminée. Nous avons notamment essayé de trouver un moyen de debbug un notebook pluto mais ce n'est pas disponible directement dans Pluto, et la librairie (https://github.com/disberd/PlutoVSCodeDebugger.jl) proposant de le faire dans VSCode n'a pas été mise à jour depuis plusieurs mois (presque 1an) donc pas utilisabel. Une archive de nos essais se trouve dans le dossier blackjack_julia/Essai1_PlutoNotebook_NotWorking.
Finalement, nous avons réussi à construire un notebook fonctionnel en reprenant l'exemple du notebook proposé par Remy. On a première cellule qui nous permet d'appeler toutes les packages nécessaire et à initialiser la partie. On a une cellule affichant l'état du jeu grâce à la fonction interaction et une cellule avec des boutons reliés à une variable d'état du jeu.

### A vous de jouer !
Pour jouer au notebook, tappez la commande suivante dans le terminal : `blackjack_notebook()`.

Remarque : C'est tout à fait normal si au début le notebook affiche une erreur, il faut attendre quelques secondes.

# Jeu dans R
- Structure du code assez similaire à Julia.
- La difference la plus flagrante entre les deux langages: Julia ne change pas la classe des variables en appliquant des fonction, alors que dans R, ça change. Un  exemple sur cela se voit dans la fonction sample change la classe deck en une classe list.
- Solution: on impose la classe en appliquant la fonction, par exemple: Deck(sample(...)) ce qui rend une classe deck et pas list.

## Jeu dans le terminal

### Strucure
- Fichier `Cartes_et_Deck.R` : Pour définir les définition de cartes et de deck, et les fonctions à utiliser et à appeler dans le jeu.
- Fichier `le_jeu.R` : Pour définir un fonction pour initialiser le jeu, une autre pour afficher le statut de la partie et une pour saisir la réponse du joueur dans le terminal. Définir aussi la fonction jeu qui appelle les autres fontions pour faire run au jeu.

### A vous de jouer !
Pour lancer le jeu depuis le terminal R : 
```r
library(blackjack)
jeu()
```


## Jeu avec RShiny

### Structure
- Fichier `shinyapp.r` : En utilisant comme source le fichier `Cartes_et_Deck.R`, initialiser le jeu, décrire un path pour les images à utiliser dans le jeu, créer des boutons pour les actions du joueur ("New Game", "Hit", "Stand"), afficher une console intéractive pour pouvoir jouer.

### A vous de jouer !
Pour lancer le shiny depuis le terminal R :
```r
library(blackjack)
shiny::runApp(system.file("shinyapp", package = "blackjack"))
```
# Jeu dans Python
## Jeu dans le terminal
### Strucutre
La strucute est assez similaire à celle de Julia.
- Fichier `carte` : Pour définir la class carte.
- Fichier `deck` : Pour définir la class deck (main des joueurs).
- Fichier `jeu` : Pour définir les fonctions de jeu.
Pour pouvuoir jouer au jeu depuis le package Julia, on utilise le package PyCall.

### A vous de jouer !
Pour jouer à la version Python, tappez la commande suivante dans le terminal : `BlackjackPython.blackjack_python()`.

