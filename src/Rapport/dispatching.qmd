---
title: "Illustration du simple et multiple dispatching : calculateur de dérivées"
---
# Le dispatching : qu'est ce que c'est ?
Dans la programmation orienté $*objet* et les langages *fonctionnels*, le **dispatching** détermine **quelle version d'une fonction ou d'une méthode doit ètre appelée** lorsqu'une fonction est éxécutée, en fonction de ses arguments ou d'autres critères. Certains langages de programmations comme **Python** ou **R** intègre le **simple dispatching**, tandis que d'autres langages intègrent une téchnique plus avancée : le **multiple dispatching**. Dans les deux exemples ci-dessous (en R puis en Julia), nous allons définir une fonction qui effectue une multiplication matricielle si les entrées sont des matrices, et une multiplication élément par élément si les entrées sont des vecteurs. Asini, nous allons pouvoir analyser les différences de code entre les deux langages.

# Simple dispatching (R)

Le **simple dispatching** repose uniquement sur le **premier argument** de la fonction. L'execution de la fonction nécessite des verifications manuelles dans chaque méthode, affectant fortement le coût d'execution du code (poussé davantage par le caractère interprété des langages comme R et python). L'ajout de nouveaux cas (exemple 2) nécecssite de modifier le code existant, créeant un risque d'introduire des erreurs, rends le code moins maintenable et peut nécessiter des tests supplémentaires pour s'assurer que les modifications n'ont pas modifié les comportements existants.

```r
multiply <- function(x, y) {
  UseMethod("multiply")
}

# Méthode pour les matrices
multiply.matrix <- function(x, y) {
  if (is.matrix(x) && is.matrix(y)) { # Etape de verificatiopn
    return(x %*% y)  # Multiplication matricielle
  } else if (is.matrix(x) && is.numeric(y)) {
    return(x * y)  # Multiplication élément par élément
  } else {
    stop("Invalid types for matrix multiplication")
  }
}

# Méthode pour les vecteurs
multiply.numeric <- function(x, y) {
  if (is.numeric(x) && is.numeric(y)) {
    return(x * y)  # Multiplication élément par élément
  } else if (is.numeric(x) && is.matrix(y)) {
    return(x * y)  # Multiplication élément par élément
  } else {
    stop("Invalid types for numeric multiplication")
  }
}
```


# Multiple dispatching (Julia)

Le multiple dispatching permet de définir des méthodes spécifiques pour chaque combinaisons de types d'arguments pour une fonction donnée, sans vérifications manuelles supplémentaires.
En Julia, le multiple dispatching permet de définir des méthodes spécifiques pour chaque combinaison de types d'arguments, sans vérifications manuelles supplémentaires.

```r
# Méthode pour deux matrices
function multiply(x::Matrix, y::Matrix)
    return x * y  # Multiplication matricielle
end

# Méthode pour deux vecteurs
function multiply(x::Vector, y::Vector)
    return x .* y  # Multiplication élément par élément
end

# Méthode pour une matrice et un vecteur
function multiply(x::Matrix, y::Vector)
    return x .* y  # Multiplication élément par élément
end

# Méthode pour un vecteur et une matrice
function multiply(x::Vector, y::Matrix)
    return x .* y  # Multiplication élément par élément
end
```

Chaque combinaison de types est une méthode distincte. Il y'a une séparation claire entre les comportements par types. L'ajout d'une nouvelle méthode est indépendante des autres, et Julia génère du code natif pour chaque méthode.


# Comparaison de l'ajout d'une modalité dans les deux 

## R 
Dans le cas du rajout d'une nouvelle méthode (ici : multiplicaion entre une matrice et un scalaire), il faut modifier la méthode multiply.matrix pour inclure ce nouveau cas dans la fonction déjà créée.

```r
# Mise à jour de la méthode pour les matrices
multiply.matrix <- function(x, y) {
  if (is.matrix(x) && is.matrix(y)) {
    return(x %*% y)  # Multiplication matricielle
  } else if (is.matrix(x) && is.numeric(y) && length(y) == 1) {
    return(x * y)  # Multiplication par un scalaire
  } else if (is.matrix(x) && is.numeric(y)) {
    return(x * y)  # Multiplication élément par élément (vecteur)
  } else {
    stop("Invalid types for matrix multiplication")
  }
}
```

Cette méthode d'ajout rajoute de la compléxité car cela nécessité de détecter manuellement que y est un scalaire, rendant le code plus compliqué. Aussi, la méthode initiale est modifiée, pouvant induire, dans des cas plus complèxes, à des ubgs si certaines conditions se chevauchent ou dans le cas d'une erreur dans le code écrit. Avec les conditions imbriquées de plus en plus complèces, le code devient difficile à comprendre et à maintenir.

## Julia

Dans le cas d'un langage incluant le multiple dispatching colle Julia, ajouter la multiplication par un scalaire devient beaucoup plus simple : il suffit de créer une nouvelle méthode indépendante des autres méthodes créées.
```r
# Création de la méthode pour matrice et scalaire
function multiply(x::Matrix, y::Number)
    return x .* y  # Multiplication par un scalaire
end
```

Ainsi, le mjultiple dispatching permet, sous des langages comme Julia, d'ajouter facilement de nouvelles méthodes sans modifier le code existant. Aussi, chaque méthode étant séparée de manière explicite, la lisibilité est améliorée, le code devient plus facile à lire et à compredre. Enfin, les compilateurs peuvent optimiser le dispatching pour générer du code à chaque combinaison de types.
Conclusion

# Conclusion

Pour des langages incluant le simple dispatching comme R, gérer des cas supplémentaires devient rapidement complexe et illisible. Pour les langages comme Julia, le multiple dispatching permet d'ajouter facilement de nouveaux comportements pour des combinaisons de types, sans toucher au code existant. Cela rend Julia et les autres langages incluant le multiple dispatching à la fois plus performant, plus clair, et plus extensible.