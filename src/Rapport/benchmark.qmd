---
title: "Benchmark entre Pytho et Julia"
format: html
---
# Principe
Pour comparer les deux langages, nous comparons leurs performances en termes de temps de calcul sur une même fonction comptant plusieurs boucles. Nous voulons notamment vérifier si les calculs sont plus rapides en Julia grace au fait qu'il s'agisse d'un langage "compiled just in time" et que python soit un langage interprété (supposé plus lent).

La fonction que nous utilisons est un cribble d'erathostene prennant en paramètres un entier naturel n et renvoyant la liste des entiers naturels premiers strictement plus petits que n.

Concrètement, on crée une liste de taille n remplie de booléens mis à true. Pour i allant de 2 à n, on regarde si les entiers j de i+1 à n sont des multiples de i, si c'est le cas on les notes comme non premiers dans la liste de booléens. Après la boucle, on renvoie les index de la liste qui sont à true.

Puisqu'il s'agit de boucle for, le temps de calcul nécessaire peut rapidement augmenter.

# Code

## Python
Pour executer le code Python, on utilise  le package `PyCall` qui permet de coder en Python dans Julia.

```r
using PyCall

py"""
import time

def cribble_erathostene(n=7):
    liste_boolean_prime = [True for _ in range(0, n)]
    liste_boolean_prime[0] = False
    liste_boolean_prime[1] = False
    for i in range(2, n):
        for j in range(i + 1, n):
            if liste_boolean_prime[j]:
                if divmod(j, i)[1] == 0:
                    liste_boolean_prime[j] = False

    index_primes = [i for i, x in enumerate(liste_boolean_prime) if x]
    return index_primes
"""

cribble_erathostene_python = py"cribble_erathostene"

function cribble_erathostene_python_time(n::Int64)
    @time cribble_erathostene_python(n)
end
```

## Julia
```r
function cribble_erathostene_julia(n::Int64)
    list_boolean_prime = ones(Bool,n)
    list_boolean_prime[1] = false

    for i in range(2,n)
        for j in range(i+1,n)
            # Si j est potentiellement premier
            if (list_boolean_prime[j])
                # Si i divise j
                if (rem(j,i) == 0)
                    # j n'est pas premier
                    list_boolean_prime[j] = false
                end
            end
        end
    end
    # On retourne les index de list_boolean_prime dont la valeur est true.
    index_primes = findall(list_boolean_prime)
    return index_primes
end

function cribble_erathostene_julia_time(n::Int64)
    @time cribble_erathostene_julia(n)
end
```

# A vous de jouer
Après avoir installé et appelé le package ProjetBlackJack, vous pouvez utiliser `ProjetBlackJack.Benchmark.cribble_erathostene_python`, `ProjetBlackJack.Benchmark.cribble_erathostene_python_time`, `ProjetBlackJack.Benchmark.cribble_erathostene_julia`, `ProjetBlackJack.Benchmark.cribble_erathostene_julia_time` pour tester les fonctions.

# Résultats de la comparaison

Pour différentes valeurs de n, on compare le nombre de secondes nécessaire pour chaque langage.

### 10
<div class="two-images">
<figure>
    <img src="images/julia_10.png" alt="Julia pour n=10" style="max-width: 80%; max-height: 80%;">
    <figcaption>Julia</figcaption>
  </figure>
  <figure>
    <img src="images/python_10.png" alt="Python pour n=10" style="max-width: 80%; max-height: 80%;">
    <figcaption>Python</figcaption>
  </figure>
</div>

### 100
<div class="two-images">
<figure>
    <img src="images/julia_100.png" alt="Julia pour n=100" style="max-width: 80%; max-height: 80%;">
    <figcaption>Julia</figcaption>
  </figure>
  <figure>
    <img src="images/python_100.png" alt="Python pour n=100" style="max-width: 80%; max-height: 80%;">
    <figcaption>Python</figcaption>
  </figure>
</div>

### 1k
<div class="two-images">
<figure>
    <img src="images/julia_1k.png" alt="Julia pour n=1k" style="max-width: 80%; max-height: 80%;">
    <figcaption>Julia</figcaption>
  </figure>
  <figure>
    <img src="images/python_1k.png" alt="Python pour n=1k" style="max-width: 80%; max-height: 80%;">
    <figcaption>Python</figcaption>
  </figure>
</div>

### 10k
<div class="two-images">
<figure>
    <img src="images/julia_10k.png" alt="Julia pour n=10k" style="max-width: 80%; max-height: 80%;">
    <figcaption>Julia</figcaption>
  </figure>
  <figure>
    <img src="images/python_10k.png" alt="Python pour n=10k" style="max-width: 80%; max-height: 80%;">
    <figcaption>Python</figcaption>
  </figure>
</div>

### 100k
<div class="two-images">
<figure>
    <img src="images/julia_100k.png" alt="Julia pour n=100k" style="max-width: 80%; max-height: 80%;">
    <figcaption>Julia</figcaption>
  </figure>
  <figure>
    <img src="images/python_100k.png" alt="Python pour n=100k"  style="max-width: 80%; max-height: 80%;">
    <figcaption>Python</figcaption>
  </figure>
</div>

### Graphique
On voit mieux la différence en regroupant les résultats dans un graphique :

<div style="text-align: center;">
  <img src="images/graphique_benchmark.png" alt="Graphique Benchmark" style="max-width: 60%; max-height: 60%;">
</div>
Lengende : <font color="forestgreen"> Python </font> vs <font color="purple"> Julia </font>. 

# Conclusion
- Pour de relativement petites valeurs de n (- de 1000), la différence entre Julia et Python est négligeable.
- Au delà de 1000, la différence entre les deux langage devient bien plus nette :
    - Python prend plus de temps de que Julia.
    - Le temps de calcul nécessaire croit plus rapidement pour Python que pour Julia.

