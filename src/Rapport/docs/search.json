[
  {
    "objectID": "blackjack.html",
    "href": "blackjack.html",
    "title": "Projet jeu du blackjack",
    "section": "",
    "text": "6 jeux de carte sont défini et mélangé (52 cartes, pas de joker)\nLe joueur appuie sur un bouton pour démarrer la partie\nLe programme distribue deux cartes retournées au joueur\nLe programme distribue une carte retournée et une carte cachée a l’ordi\nLes points sont calculés et affichés au joueur\nLe joueur doit choisir entre laisser l’ordi jouer ou retirer une carte\n*S’il décide de tirer une carte :\n\nSi le nombre de points est = 21, il a gagné et le jeu s’arrette\nSi le nombre de points est &gt;21, il a perdu et le jeu s’arrette\nSi le nombre de points inferieur à 21, il peut décider de rejouer* ou de s’arretter**\n\n**S’il décide de s’arretter, l’ordi va retourner la carte cachée :\n\nSi il tombe sur 21, l’ordi gagne\nSi son nombre de points est inferieur à 18, il retourne une carte\nSi son nombre de points est superieur à 18 (entre 18 et 21), il s’arrette\nSi son nombre de points est superieur à 21, le joueur gagne\n\n\n\n\n\n\n2 à 10 -&gt; valeur de la carte\nValet, dame, roi -&gt; 10\nAs -&gt;\n\n11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.\n1 si en ajoutant 11, le score dépasse 21.\n\n\n\n\n\n\nAjouter une fonctionnalité de pari : le joueur peut parier des jetons sur sa réussite.\nJouer à plusieurs.\nAjouter un timer."
  },
  {
    "objectID": "blackjack.html#déroulement-dune-partie",
    "href": "blackjack.html#déroulement-dune-partie",
    "title": "Projet jeu du blackjack",
    "section": "",
    "text": "6 jeux de carte sont défini et mélangé (52 cartes, pas de joker)\nLe joueur appuie sur un bouton pour démarrer la partie\nLe programme distribue deux cartes retournées au joueur\nLe programme distribue une carte retournée et une carte cachée a l’ordi\nLes points sont calculés et affichés au joueur\nLe joueur doit choisir entre laisser l’ordi jouer ou retirer une carte\n*S’il décide de tirer une carte :\n\nSi le nombre de points est = 21, il a gagné et le jeu s’arrette\nSi le nombre de points est &gt;21, il a perdu et le jeu s’arrette\nSi le nombre de points inferieur à 21, il peut décider de rejouer* ou de s’arretter**\n\n**S’il décide de s’arretter, l’ordi va retourner la carte cachée :\n\nSi il tombe sur 21, l’ordi gagne\nSi son nombre de points est inferieur à 18, il retourne une carte\nSi son nombre de points est superieur à 18 (entre 18 et 21), il s’arrette\nSi son nombre de points est superieur à 21, le joueur gagne"
  },
  {
    "objectID": "blackjack.html#valeurs-des-cartes",
    "href": "blackjack.html#valeurs-des-cartes",
    "title": "Projet jeu du blackjack",
    "section": "",
    "text": "2 à 10 -&gt; valeur de la carte\nValet, dame, roi -&gt; 10\nAs -&gt;\n\n11 si en ajoutant 11 à la main, le score est inférieur ou égal à 21.\n1 si en ajoutant 11, le score dépasse 21."
  },
  {
    "objectID": "blackjack.html#idées-supplémentaires",
    "href": "blackjack.html#idées-supplémentaires",
    "title": "Projet jeu du blackjack",
    "section": "",
    "text": "Ajouter une fonctionnalité de pari : le joueur peut parier des jetons sur sa réussite.\nJouer à plusieurs.\nAjouter un timer."
  },
  {
    "objectID": "blackjack.html#structure-du-projet-en-julia",
    "href": "blackjack.html#structure-du-projet-en-julia",
    "title": "Projet jeu du blackjack",
    "section": "Structure du projet en Julia",
    "text": "Structure du projet en Julia\n\nFichier carte.jl : Pour définir la classe carte (attributs : String nom, Int valeur, image interface graphique)\nFichier deck.jl : Pour définir la classe deck (attributs : list de carte. Méthode : distribuer une carte (choisir une carte au hasard, la mettre dans la main de quelquu’un et l’enlever dans la liste de carte du deck)) Note : 6x52 cartes pour 1 deck de base.\nFichier jeu.jl : Pour définir la classe de jeu (attributs : deck, deux main_cartes (ordi + joueur))\nFichier main_terminal.jl : fonction générale avec les boucles de jeu."
  },
  {
    "objectID": "blackjack.html#jeu-dans-le-terminal-1",
    "href": "blackjack.html#jeu-dans-le-terminal-1",
    "title": "Projet jeu du blackjack",
    "section": "Jeu dans le terminal",
    "text": "Jeu dans le terminal\n\nFichier Cartes_et_Deck.R : Pour définir les définition de cartes et de deck, et les fonctions à utiliser et à appeler dans le jeu.\nFichier le_jeu.R : Pour définir un fonction pour initialiser le jeu, une autre pour afficher le statut de la partie et une pour saisir la réponse du joueur dans le terminal. Définir aussi la fonction jeu qui appelle les autres fontions pour faire run au jeu."
  },
  {
    "objectID": "blackjack.html#jeu-avec-rshiny",
    "href": "blackjack.html#jeu-avec-rshiny",
    "title": "Projet jeu du blackjack",
    "section": "Jeu avec RShiny",
    "text": "Jeu avec RShiny\n\nFichier shinyapp.r : En utilisant comme source le fichier “Cartes_et_Deck.R”, initialiser le jeu, décrire un path pour les images à utiliser dans le jeu, créer des boutons pour les actions du joueur (“New Game”, “Hit”, “Stand”), afficher une console intéractive pour pouvoir jouer."
  },
  {
    "objectID": "Journal.html",
    "href": "Journal.html",
    "title": "Journal de suivi du projet",
    "section": "",
    "text": "Entrées du journal\nJeudi 26/09 : Nous avons réfléchi ensemble au projet que nous souhaitions faire. Nous sommes tombés d’accord sur le jeu du blackjack qui nous permet de travailler sur l’apprentissage de R et de Julia avec la possibilité de passer à un affichage graphique du jeu. Nous avons posé les règles du jeu et mis de côté quelques mécaniques telle que le bet, le fait d’avoir plusieurs joueurs et la présence d’un timer. Nous avons également discuté de la structure du projet en Julia, comment faire pour coder le jeu. Nous avons créé les fichiers carte.jl, deck.jl, jeu.jl, main.jl, et nous avons tenté - infructueusement - de définir une structure de carte.\nMardi 01/10 : Mise en commun de ce qu’a cherché Lancelot durant le weekend : fonction de création de carte, de deck de 52 cartes, de deck de blackjack et mélanger un deck. Reflexions sur l’affichage : dash.jl, maki.jl, pluto.jl -&gt; pour faire du html / javascript et avoir quelque chose d’intéractif. Question en cours sur les notions de simple vs multiple dispatching expliquées par Remy. Galères avec github : on choisit de partir sur un fonctionnement en branches ou en fork pour séparer notre travail.\nMercredi 02/10 : Ré-adaptation des fonction de création de deck de blackjack et de mélange de deck. On a créé 2 fonctions shuffle et shuffle! dans le but d’éviter de devoir recréer le deck de blackjack à chaque partie (dans une session), seulement au début de la session ce qui parait plus optimisé. Problématique pour surcharger / étendre les fonction shuffle(!) déjà existantes dans la librairie Random, on l’importe explicitement. Creation des fonctions de calculs de la valeur d’une main et de tirer une carte. Première boucle de jeu à 1 joueur basique. On a appris comment demander à un utilisateur de rentrer quelque chose dans le terminal. Choix d’avoir une seule struct Deck à la fois pour le paquet de carte et pour les mains puisque les deux sont composés d’un vect de Carte.\nJeudi 03/10: Mise en commun de ce que chacun a fait Mercredi. On a réparé et amélioré les boucles d’affichage de la valeur d’une main et de la boucle de jeu (problèmes sur les conditions de fin de jeu) et création d’une fonction d’affichage de la main du joueur (les cartes). On a fait plusieurs parties pour tester (et repérer les erreurs). On s’est rendu compte qu’il y avait une version amércaine et une version européenne des règles, on décide de partir sur la version européenne pour le moment car la règle supplémentaire des américains est basée sur la notion de pari / bet que l’on a pas encore implémentée. On a appris à faire concaténation de String avec s1 * s2.\nMardi 08/10 : On a appris à créer des pull request et résoudre les conflits sur GitHub à partir du travail qu’avait fait Danielle durant le weekend. Création de module pour les appeler dans pluto. Création du pluto avec les fonctions dedans. Vizagrams -&gt; Création de svg qui s’affichents dans pluto.\nJeudi 10/10 : Version du blackjack en Python. Semble + lente mais à tester précisément, avantage c’est qu’on a pas à tapper 2 fois dans la console comme en Julia donc évite les “erreurs” dans le terminal, simple à mettre en place une fois qu’on a fait le travail en Julia. Version du blackjack dans R: On a vu vraimant la difference entre R et Julia. Julia ne change pas la classe des var en utilisant des fonction, alors que dans R, par exemple: en appliquant la fct “sample” elle change la classe deck en une classe list pour laisser la classe telle quelle, on a utiliser Deck(sample(…)). On a aussi utiliser explicitement le single dispatching dans R en utilisant pour shuffle la UseMethod.\nMardi 15/10 : Corrections du code pour tout mettre en anglais. On a essayé de faire l’affichage avec Pluto et autres packages d’affichage.\nJeudi 17/10 : On a une ébauche (bugué) de notebook Pluto pour le jeu. On essaye donc de réparer ça parce que les boutons ne font pas ce que l’on veut (problème de réinitialisation, que modifie le notebook en premier et donc est-ce que les modifications sont bien faites dans l’ordre). Possibilités : passer en markdown, nettoyer le code pour séparer les calculs et l’affichage en faisant des fonctions. On veut aussi implémenter le fait d’afficher des images dans le notebook. On a également travaillé sur un deuxième projet mettant en oeuvre le simple/multiple dispatching (R/Julia) avec du calcul de dérivées.\nLundi 21/10 : Essai de nettoyer un peu le notebook Pluto. Recherche de moyen de debbug un notebook pluto mais ça n’est pas disponible directement dans Pluto et la librairie (https://github.com/disberd/PlutoVSCodeDebugger.jl) proposant de le faire dans VSCode n’a pas été update depuis plusieurs mois (presque 1an) donc pas moyen de faire le cheminement de penser du notebook sans faire du débug cochon. Première mise à jour du notebook pluto, sentiment qu’on est pas loin mais toujours soucis de mémoire de la valeur de player_action, à terminer.\nJeudi 24/10 : On a fait une autre version de la fonction jeu, en divisant la fonction en plusieurs fonctions pour pouvoir juste les appeler pour faire run au jeu dans le terminal et dans Pluto.On a fix les boutton hit, stand, new game dans Pluto avec Vizigram. Toujours un problème dans le Pluto : au début on pensait que c’était parce qu’on n’avait pas le temps de changer la valeur du bouton et donc on a pensé à mettre un sleep dans la boucle pour avoir le temps de cliquer sur les boutons pour changer la valeur de l’input MAIS en fait ça ne marche pas, on ne peut pas update les boutons tant que la fonction game() n’est pas terminée. Autre idée : un wait(condition) pour forcer à changer la valeur du bouton mais c’est un peu flou.\nVacances Toussaint : Fini le benchmark de Python et Julia (appel avec le package PyCall). Boucle pour le jeu dans le terminal sans boucle while : on passe par une fonction récursive. Après avoir joué, on regarde si la partie est terminée, si ça n’est pas le cas alors on rejoue.\nMardi 05/10 : Ajout de la documentation sur toutes les fonctions (hors notebook). Petite correction sur la boucle de jeu pour la condition de fin.\n\n\nChoses à faire\n\ngraphicstrial.jl -&gt; Implémenter l’affichage des images dans le notebook.\nRegarder comment on fait de la documentation en Julia.\nShiny pour l’affichage du jeu en R.\nhttps://quarto.org/docs/publishing/github-pages.html"
  },
  {
    "objectID": "dispatching.html",
    "href": "dispatching.html",
    "title": "Illustration du simple et multiple dispatching : calculateur de q",
    "section": "",
    "text": "Explication idée"
  },
  {
    "objectID": "dispatching.html#code-r",
    "href": "dispatching.html#code-r",
    "title": "Illustration du simple et multiple dispatching : calculateur de q",
    "section": "Code R",
    "text": "Code R"
  },
  {
    "objectID": "dispatching.html#julia",
    "href": "dispatching.html#julia",
    "title": "Illustration du simple et multiple dispatching : calculateur de q",
    "section": "Julia",
    "text": "Julia"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rapport projet",
    "section": "",
    "text": "Noms : Lancelot Ravier, Danielle El Khoury, Garance Malnoë\nBienvenue sur notre rapport !\nNous avons travaillé sur différents projets qui ont chacun une page dédiée :\n\nUn jeu de blackjack en Julia, Python et R jouable dans le terminal et des tentatives d’affichage graphique.\nUn calculateur de dérivée en Julia et R, pour mettre en évidence l’utilité du multiple-dispatching de Julia.\nUn benchmark entre Julia, Python et C++ à partir du cribble d’Erathostene.\n\nPour mieux comprendre le processus de création, la page journal regroupe nos réflexions tout au long du projet."
  },
  {
    "objectID": "benchmark.html",
    "href": "benchmark.html",
    "title": "Benchmark entre Python, Julia et C++",
    "section": "",
    "text": "Image du code parce que C++ n’est pas supporté par Quarto."
  },
  {
    "objectID": "benchmark.html#c",
    "href": "benchmark.html#c",
    "title": "Benchmark entre Python, Julia et C++",
    "section": "",
    "text": "Image du code parce que C++ n’est pas supporté par Quarto."
  }
]