lower_bound <- interval[1]
upper_bound <- interval[2]
if (theta >= lower_bound && theta <= upper_bound) {
count_in_interval <- count_in_interval + 1
}
}
estimated_confidence_level <- count_in_interval / n_simulations
cat("Estimation du niveau de confiance (pour 1000 simulations) :", estimated_confidence_level, "\n")
n_values <- c(3, 10, 100, 1000)
theta_values <- c(0.5, 0.2, 0.1, 0.001)
alpha_values <- c(0.01, 0.05, 0.1)
n_simulations <- 1000
# Calcul de l'intervalle asymptotique
asymptotic_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
z_alpha2 <- qnorm(1 - alpha / 2)
lower_bound <- theta_hat - z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
upper_bound <- theta_hat + z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
return(c(lower_bound, upper_bound))
}
# Calcul de l'intervalle par excès
bienayme_tchebychev_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
lower_bound <- theta_hat - 1 / (2 * sqrt(n * alpha))
upper_bound <- theta_hat + 1 / (2 * sqrt(n * alpha))
return(c(lower_bound, upper_bound))
}
compare_intervals <- function(n_values, theta_values, alpha_values, n_simulations) {
results <- data.frame(
n = integer(),
theta = numeric(),
alpha = numeric(),
confidence_asymptotic = numeric(),
confidence_bienayme = numeric()
)
for (n in n_values) {
for (theta in theta_values) {
for (alpha in alpha_values) {
count_asymptotic <- 0
count_bienayme <- 0
for (i in 1:n_simulations) {
interval_asymptotic <- asymptotic_interval(n, theta, alpha)
if (theta >= interval_asymptotic[1] && theta <= interval_asymptotic[2]) {
count_asymptotic <- count_asymptotic + 1
}
lower_bound_bienayme <- bienayme_tchebychev_interval(n, theta, alpha)
if (theta >= lower_bound_bienayme) {
count_bienayme <- count_bienayme + 1
}
}
confidence_asymptotic <- count_asymptotic / n_simulations
confidence_bienayme <- count_bienayme / n_simulations
results <- rbind(results, data.frame(
n = n,
theta = theta,
alpha = alpha,
confiance_asymptotique = confidence_asymptotic,
confiance_b_t = confidence_bienayme
))
}
}
}
return(results)
}
set.seed(123)
results <- compare_intervals(n_values, theta_values, alpha_values, n_simulations)
n_values <- c(3, 10, 100, 1000)
theta_values <- c(0.5, 0.2, 0.1, 0.001)
alpha_values <- c(0.01, 0.05, 0.1)
n_simulations <- 1000
# Calcul de l'intervalle asymptotique
asymptotic_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
z_alpha2 <- qnorm(1 - alpha / 2)
lower_bound <- theta_hat - z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
upper_bound <- theta_hat + z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
return(c(lower_bound, upper_bound))
}
# Calcul de l'intervalle par excès
bienayme_tchebychev_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
lower_bound <- theta_hat - 1 / (2 * sqrt(n * alpha))
upper_bound <- theta_hat + 1 / (2 * sqrt(n * alpha))
return(c(lower_bound, upper_bound))
}
compare_intervals <- function(n_values, theta_values, alpha_values, n_simulations) {
results <- data.frame(
n = integer(),
theta = numeric(),
alpha = numeric(),
confidence_asymptotic = numeric(),
confidence_bienayme = numeric()
)
for (n in n_values) {
for (theta in theta_values) {
for (alpha in alpha_values) {
count_asymptotic <- 0
count_bienayme <- 0
for (i in 1:n_simulations) {
interval_asymptotic <- asymptotic_interval(n, theta, alpha)
if (theta >= interval_asymptotic[1] && theta <= interval_asymptotic[2]) {
count_asymptotic <- count_asymptotic + 1
}
interval_bienayme <- bienayme_tchebychev_interval(n, theta, alpha)
lower_bound <- interval[1]
upper_bound <- interval[2]
if (theta >= lower_bound && theta <= upper_bound) {
count_bienayme <- count_bienayme + 1
}
}
confidence_asymptotic <- count_asymptotic / n_simulations
confidence_bienayme <- count_bienayme / n_simulations
results <- rbind(results, data.frame(
n = n,
theta = theta,
alpha = alpha,
confiance_asymptotique = confidence_asymptotic,
confiance_b_t = confidence_bienayme
))
}
}
}
return(results)
}
set.seed(123)
results <- compare_intervals(n_values, theta_values, alpha_values, n_simulations)
print(results)
n_values <- c(3, 10, 100, 1000)
theta_values <- c(0.5, 0.2, 0.1, 0.001)
alpha_values <- c(0.01, 0.05, 0.1)
n_simulations <- 1000
# Calcul de l'intervalle asymptotique
asymptotic_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
z_alpha2 <- qnorm(1 - alpha / 2)
lower_bound <- theta_hat - z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
upper_bound <- theta_hat + z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
return(c(lower_bound, upper_bound))
}
# Calcul de l'intervalle par excès (Bienaymé-Tchebychev)
bienayme_tchebychev_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
lower_bound <- theta_hat - 1 / (2 * sqrt(n * alpha))
upper_bound <- theta_hat + 1 / (2 * sqrt(n * alpha))
return(c(lower_bound, upper_bound))
}
# Fonction de comparaison des intervalles de confiance
compare_intervals <- function(n_values, theta_values, alpha_values, n_simulations) {
results <- data.frame(
n = integer(),
theta = numeric(),
alpha = numeric(),
confidence_asymptotic = numeric(),
confidence_bienayme = numeric()
)
for (n in n_values) {
for (theta in theta_values) {
for (alpha in alpha_values) {
count_asymptotic <- 0
count_bienayme <- 0
for (i in 1:n_simulations) {
interval_asymptotic <- asymptotic_interval(n, theta, alpha)
if (theta >= interval_asymptotic[1] && theta <= interval_asymptotic[2]) {
count_asymptotic <- count_asymptotic + 1
}
interval_bienayme <- bienayme_tchebychev_interval(n, theta, alpha)
if (theta >= interval_bienayme[1] && theta <= interval_bienayme[2]) {
count_bienayme <- count_bienayme + 1
}
}
confidence_asymptotic <- count_asymptotic / n_simulations
confidence_bienayme <- count_bienayme / n_simulations
results <- rbind(results, data.frame(
n = n,
theta = theta,
alpha = alpha,
confidence_asymptotic = confidence_asymptotic,
confidence_bienayme = confidence_bienayme
))
}
}
}
return(results)
}
set.seed(123)
results <- compare_intervals(n_values, theta_values, alpha_values, n_simulations)
print(results)
n_values <- c(3, 10, 100, 1000)
theta_values <- c(0.5, 0.2, 0.1, 0.001)
alpha_values <- c(0.01, 0.05, 0.1, 0.2)
n_simulations <- 1000
# Calcul de l'intervalle asymptotique
asymptotic_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
z_alpha2 <- qnorm(1 - alpha / 2)
lower_bound <- theta_hat - z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
upper_bound <- theta_hat + z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
return(c(lower_bound, upper_bound))
}
# Calcul de l'intervalle par excès (Bienaymé-Tchebychev)
bienayme_tchebychev_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
lower_bound <- theta_hat - 1 / (2 * sqrt(n * alpha))
upper_bound <- theta_hat + 1 / (2 * sqrt(n * alpha))
return(c(lower_bound, upper_bound))
}
# Fonction de comparaison des intervalles de confiance
compare_intervals <- function(n_values, theta_values, alpha_values, n_simulations) {
results <- data.frame(
n = integer(),
theta = numeric(),
alpha = numeric(),
confidence_asymptotic = numeric(),
confidence_bienayme = numeric()
)
for (n in n_values) {
for (theta in theta_values) {
for (alpha in alpha_values) {
count_asymptotic <- 0
count_bienayme <- 0
for (i in 1:n_simulations) {
interval_asymptotic <- asymptotic_interval(n, theta, alpha)
if (theta >= interval_asymptotic[1] && theta <= interval_asymptotic[2]) {
count_asymptotic <- count_asymptotic + 1
}
interval_bienayme <- bienayme_tchebychev_interval(n, theta, alpha)
if (theta >= interval_bienayme[1] && theta <= interval_bienayme[2]) {
count_bienayme <- count_bienayme + 1
}
}
confidence_asymptotic <- count_asymptotic / n_simulations
confidence_bienayme <- count_bienayme / n_simulations
results <- rbind(results, data.frame(
n = n,
theta = theta,
alpha = alpha,
confidence_asymptotic = confidence_asymptotic,
confidence_bienayme = confidence_bienayme
))
}
}
}
return(results)
}
set.seed(123)
results <- compare_intervals(n_values, theta_values, alpha_values, n_simulations)
print(results)
n_values <- c(3, 10, 100, 1000)
theta_values <- c(0.5, 0.2, 0.1, 0.001)
alpha_values <- c(0.05, 0.1, 0.2, 0.5)
n_simulations <- 1000
# Calcul de l'intervalle asymptotique
asymptotic_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
z_alpha2 <- qnorm(1 - alpha / 2)
lower_bound <- theta_hat - z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
upper_bound <- theta_hat + z_alpha2 * sqrt(theta_hat * (1 - theta_hat) / n)
return(c(lower_bound, upper_bound))
}
# Calcul de l'intervalle par excès (Bienaymé-Tchebychev)
bienayme_tchebychev_interval <- function(n, theta, alpha) {
X <- rbinom(n, 1, theta)
theta_hat <- mean(X)
lower_bound <- theta_hat - 1 / (2 * sqrt(n * alpha))
upper_bound <- theta_hat + 1 / (2 * sqrt(n * alpha))
return(c(lower_bound, upper_bound))
}
# Fonction de comparaison des intervalles de confiance
compare_intervals <- function(n_values, theta_values, alpha_values, n_simulations) {
results <- data.frame(
n = integer(),
theta = numeric(),
alpha = numeric(),
confidence_asymptotic = numeric(),
confidence_bienayme = numeric()
)
for (n in n_values) {
for (theta in theta_values) {
for (alpha in alpha_values) {
count_asymptotic <- 0
count_bienayme <- 0
for (i in 1:n_simulations) {
interval_asymptotic <- asymptotic_interval(n, theta, alpha)
if (theta >= interval_asymptotic[1] && theta <= interval_asymptotic[2]) {
count_asymptotic <- count_asymptotic + 1
}
interval_bienayme <- bienayme_tchebychev_interval(n, theta, alpha)
if (theta >= interval_bienayme[1] && theta <= interval_bienayme[2]) {
count_bienayme <- count_bienayme + 1
}
}
confidence_asymptotic <- count_asymptotic / n_simulations
confidence_bienayme <- count_bienayme / n_simulations
results <- rbind(results, data.frame(
n = n,
theta = theta,
alpha = alpha,
confidence_asymptotic = confidence_asymptotic,
confidence_bienayme = confidence_bienayme
))
}
}
}
return(results)
}
set.seed(123)
results <- compare_intervals(n_values, theta_values, alpha_values, n_simulations)
print(results)
set.seed(123)
n_vals <- c(10, 30, 50, 100)
theta_vals <- c(0.1, 0.2, 0.5, 1)
B <- 1000
alpha <- 0.05
estimate_power <- function(n, B, alpha, theta) {
rejeter_H0 <- numeric(B)
for (i in 1:B) {
sample_data <- rnorm(n, mean = theta, sd = 1)
test_stat <- mean(sample_data)
seuil <- qnorm(1 - alpha, mean = 0, sd = 1 / sqrt(n))
rejeter_H0[i] <- ifelse(test_stat > seuil, 1, 0)
}
return(mean(rejeter_H0))
}
power_results <- expand.grid(n = n_vals, theta = theta_vals)
power_results$Power <- mapply(function(n, theta) estimate_power(n, B, alpha, theta),
power_results$n, power_results$theta)
print(power_results)
library(shiny); runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
library(shiny)
library(dplyr)
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
library(shiny)
library(dplyr)
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
library(shiny)
library(dplyr)
# Source the game logic files
source("Cartes_et_Deck.R")
# Function to initialize the game
initialize_game <- function() {
init <- create_blackjack_deck(6) %>% shuffle()
list(deck = init, player_hand = create_empty_hand(), dealer_hand = create_empty_hand())
}
# Function to generate the file name for the card image
get_card_image <- function(card) {
paste0(card$rank, "_of_", card$suit, ".png")
}
# Create the Shiny app
ui <- fluidPage(
tags$style(HTML("
body {
background-image: url('www/blackjack_table.png');
background-size: cover;
background-repeat: no-repeat;
background-position: center;
}
.card-container {
display: flex;
justify-content: center;
align-items: center;
margin: 20px;
padding: 10px;
background-color: rgba(255, 255, 255, 0.8);
border-radius: 10px;
}
")),
titlePanel("Blackjack Game with Images"),
sidebarLayout(
sidebarPanel(
actionButton("new_game", "New Game"),
actionButton("draw", "Draw"),
actionButton("fold", "Fold")
),
mainPanel(
h3("Dealer's Hand", class = "card-container"),
uiOutput("dealer_hand_images", class = "card-container"),
h3("Player's Hand", class = "card-container"),
uiOutput("player_hand_images", class = "card-container"),
verbatimTextOutput("game_status")
)
)
)
server <- function(input, output, session) {
game <- reactiveValues(deck = NULL, player_hand = NULL, dealer_hand = NULL, end_game = FALSE)
# Function to start a new game
start_new_game <- function() {
init <- initialize_game()
game$deck <- init$deck
game$player_hand <- init$player_hand
game$dealer_hand <- init$dealer_hand
game$end_game <- FALSE
game$reset_trigger <- FALSE
}
# Function to reset the game
reset_game <- function() {
game$deck <- NULL
game$player_hand <- NULL
game$dealer_hand <- NULL
game$end_game <- FALSE
game$reset_trigger <- FALSE
}
observeEvent(game$end_game, {
if (game$end_game) {
game$reset_trigger <- TRUE
}
})
# Timer to reset the table 5 secnods after the game ends
observe({
if (game$reset_trigger) {
invalidateLater(5000, session)  # 5-second delay
isolate(reset_game())
}
})
# Deal initial cards
game <- deal_initial_cards(game)
}
# Function to deal initial cards
deal_initial_cards <- function(game) {
result <- take_a_card(game$deck, game$player_hand)
game$deck <- result$pile
game$player_hand <- result$hand
result <- take_a_card(game$deck, game$dealer_hand)
game$deck <- result$pile
game$dealer_hand <- result$hand
result <- take_a_card(game$deck, game$player_hand)
game$deck <- result$pile
game$player_hand <- result$hand
return(game)
}
# Function to render the images of cards
render_hand_images <- function(hand) {
card_images <- lapply(hand$cards, function(card) {
img_src <- paste0("/", get_card_image(card))
tags$img(src = img_src, height = "100px", style = "margin: 5px;")
})
do.call(tagList, card_images)
}
# Display the dealer's hand images
output$dealer_hand_images <- renderUI({
if (is.null(game$dealer_hand)) return(NULL)
render_hand_images(game$dealer_hand)
})
# Display the player's hand images
output$player_hand_images <- renderUI({
if (is.null(game$player_hand)) return(NULL)
render_hand_images(game$player_hand)
})
# Display the game status
output$game_status <- renderText({
if (is.null(game$deck)) return("Click 'New Game' to start!")
dealer_value <- hand_value(game$dealer_hand)
player_value <- hand_value(game$player_hand)
status <- paste0(
"Player hand value: ", player_value, "\n"
)
if (game$end_game) {
if (player_value <= 21 && (dealer_value > 21 || player_value > dealer_value)) {
status <- paste0(status, "You won!\n")
} else if (dealer_value <= 21 && dealer_value > player_value) {
status <- paste0(status, "The dealer won...\n")
} else {
status <- paste0(status, "It's a draw.\n")
}
}
return(status)
})
# Observe button clicks
observeEvent(input$new_game, {
start_new_game()
})
observeEvent(input$draw, {
if (!game$end_game) {
result <- take_a_card(game$deck, game$player_hand)
game$deck <- result$pile
game$player_hand <- result$hand
if (hand_value(game$player_hand) >= 21) {
game$end_game <- TRUE
}
}
})
observeEvent(input$fold, {
if (!game$end_game) {
while (hand_value(game$dealer_hand) < 17) {
result <- take_a_card(game$deck, game$dealer_hand)
game$deck <- result$pile
game$dealer_hand <- result$hand
}
game$end_game <- TRUE
}
})
shinyApp(ui = ui, server = server)
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
runApp('Documents/GitHub/projet_blackjack_julia/R_BlackJack/shinyapp.r')
